generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ENUMS

enum GameType {
  BOT
  FRIEND
  RANDOM
}

enum GameState {
  CREATED
  WAITING // waiting for opponent to join
  ACTIVE // game is in progress
  PAUSED // game is paused, one participant left
  ENDED // game has ended
}

enum GameResult {
  DRAW
  WHITE_WON
  BLACK_WON
}

enum GameEndReason {
  // 1. i win: checkmate
  WHITE_CHECKMATE
  BLACK_CHECKMATE
  // 2. i lose: resign
  WHITE_RESIGNED
  BLACK_RESIGNED
  // 3. i lose: timeout
  WHITE_TIMEOUT
  BLACK_TIMEOUT
  // 4. draw: stalemate
  WHITE_STALEMATE
  BLACK_STALEMATE
  // 5. draw: insufficient material
  WHITE_INSUFFICIENT_MATERIAL
  BLACK_INSUFFICIENT_MATERIAL
  // 6. draw: threefold repetition
  WHITE_THREEFOLD_REPETITION
  BLACK_THREEFOLD_REPETITION
  // 7. draw: fifty move rule
  WHITE_FIFTY_MOVE_RULE
  BLACK_FIFTY_MOVE_RULE
  // 8. draw: agreement
  WHITE_REQUESTED_DRAW
  BLACK_REQUESTED_DRAW
  // 9. other
  OTHER
}

enum GameMode {
  BULLET
  BLITZ
  BLUNT
  RAPID
}

enum GameOption {
  BULLET_1
  BULLET_1_PLUS_1
  BULLET_2_PLUS_1
  BLITZ_3
  BLITZ_3_PLUS_2
  BLUNT_4_20
  RAPID_5
  RAPID_10
}

enum GameParticipantStatus {
  WAITING
  JOINED
  READY
  LEFT
}

enum GameParticipantColor {
  WHITE
  BLACK
}

enum GameChatContentType {
  TEXT
  IMAGE
  GIF
  TIP
}

// MODELS

model User {
  id                  String   @id @default(ulid())
  fid                 Int      @unique
  username            String
  displayName         String
  avatarUrl           String?
  walletAddresses     String?
  notificationDetails String?
  referrerFid         Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  gameParticipants GameParticipant[]
  moves            GameMove[]
  spectatedGames   GameSpectator[]
  chatMessages     GameChatMessage[]
  statistics       UserStatistics?
  notifications    UserNotification[]

  @@index([id], map: "idx_users_id")
  @@index([fid], map: "idx_users_fid")
  @@index([username], map: "idx_users_username")
  @@map("users")
}

model Bot {
  id        String @id @default(ulid())
  name      String
  avatarUrl String
  rating    Int    @default(400) // ELO rating

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  GameParticipant GameParticipant[]

  @@index([id], map: "idx_bots_id")
  @@map("bots")
}

model GameParticipant {
  id       String  @id @default(ulid())
  gameId   String
  userId   String?
  botId    String?
  socketId String? // socket id of the participant

  status     GameParticipantStatus @default(WAITING)
  paid       Boolean               @default(false)
  paidTxHash String? // tx hash of the payment

  timeLeft Int       @default(300) // time left 5 minutes in seconds
  endTime  DateTime? // time when the game will end

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user         User?  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bot          Bot?   @relation(fields: [botId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  game         Game   @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  gameCreator  Game[] @relation("CreatorGameParticipant")
  gameOpponent Game[] @relation("OpponentGameParticipant")

  @@index([gameId], map: "idx_game_participants_gameId")
  @@index([userId], map: "idx_game_participants_userId")
  @@map("game_participants")
}

model Game {
  id         String  @id @default(ulid())
  contractId String? // id for smart contract interaction

  gameType GameType @default(RANDOM)

  creatorId  String
  creator    GameParticipant  @relation("CreatorGameParticipant", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  opponentId String?
  opponent   GameParticipant? @relation("OpponentGameParticipant", fields: [opponentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  white String? // creator or opponent

  gameMode   GameMode   @default(RAPID)
  gameOption GameOption @default(RAPID_5)

  wageAmount String @default("1") // Amount in USDC

  gameState     GameState      @default(CREATED)
  gameResult    GameResult?
  gameEndReason GameEndReason?
  gameEndTxHash String? // tx hash of the game end

  currentFen String @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")

  totalMoves Int        @default(0) // Number of moves made
  moves      GameMove[]
  pgn        String? // PGN format of all moves

  createdAt DateTime  @default(now())
  startedAt DateTime?
  endedAt   DateTime?
  updatedAt DateTime  @updatedAt

  spectators   GameSpectator[]
  messages     GameChatMessage[]
  participants GameParticipant[]

  @@index([id], map: "idx_games_id")
  @@index([gameState], map: "idx_games_gameState")
  @@map("games")
}

model GameMove {
  id        String   @id @default(ulid())
  gameId    String
  userId    String
  move      String
  san       String // Standard Algebraic Notation, e.g., "e4"
  lan       String // Long Algebraic Notation, e.g., "e2e4"
  fen       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  game   Game @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  player User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([gameId], map: "idx_game_moves_gameId")
  @@index([userId], map: "idx_game_moves_userId")
  @@map("game_moves")
}

model GameSpectator {
  id       String    @id @default(ulid())
  userId   String
  gameId   String
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, gameId])
  @@index([userId], map: "idx_game_spectators_userId")
  @@index([gameId], map: "idx_game_spectators_gameId")
  @@map("game_spectators")
}

model GameTip {
  id              String            @id @default(ulid())
  name            String
  description     String
  slug            String
  imageUrl        String
  category        String
  price           Float
  GameChatMessage GameChatMessage[]

  @@index([id], map: "idx_game_tips_id")
  @@map("game_tips")
}

model GameChatMessage {
  id          String              @id @default(ulid())
  gameId      String
  userId      String
  contentType GameChatContentType @default(TEXT)
  content     String?
  tipId       String?
  tipChainId  Int?
  tipTxHash   String?
  tipAmount   Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  game    Game     @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user    User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gameTip GameTip? @relation(fields: [tipId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([gameId], map: "idx_game_chat_messages_gameId")
  @@index([userId], map: "idx_game_chat_messages_userId")
  @@map("game_chat_messages")
}

model UserStatistics {
  id            String   @id @default(ulid())
  userId        String   @unique
  rating        Int      @default(100) // ELO rating
  gamesPlayed   Int      @default(0)
  gamesWon      Int      @default(0)
  gamesLost     Int      @default(0)
  gamesDrawn    Int      @default(0)
  totalEarned   Float    @default(0) // Total USDC earned
  totalLost     Float    @default(0) // Total USDC lost
  winStreak     Int      @default(0) // Current win streak
  bestWinStreak Int      @default(0) // Best win streak
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId], map: "idx_user_statistics_userId")
  @@map("user_statistics")
}

model UserNotification {
  id        String   @id @default(ulid())
  userId    String
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId], map: "idx_user_notifications_userId")
  @@map("user_notifications")
}
